/*
	Torus for Linux (Windows)

	Copyright (C) 2002 JaeSung Lee (berise@dreamwiz.com)

	This program is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.	

	$Id: scorefile.cpp,v 1.1.1.1 2003/05/16 01:01:06 berise Exp $

*/
/*
#include <unistd.h>	//	access
#include <sys/stat.h>
#include <sys/types.h>
*/
#include <algorithm>
#include <functional>

#include <string.h>
#include <stdio.h>

#ifdef _WIN32
#include <io.h>
#endif

#include "scorefile.h"
#include "torusfunctors.h"


#include "wx/file.h"
//#include "wx"

static const char * TORUS_HIGHSCORE = "highscore";

//	Max count of Torus Top Players
const int TORUS_MAX_TOP_PLAYERS	=	10;



TScoreFile::TScoreFile( )
:m_bDirty( false )
{	
	if( wxFile::Exists( TORUS_HIGHSCORE ) == true )
	{
		read();
	}
	else
	{
		initialize();
		write();		
	}
}

TScoreFile::~TScoreFile()
{
	if( m_bDirty == true )
	{
		write();
	}
}



//	TORUS_HIGHSCORE 파일이 없을 경우
//	기본 점수로 모두 채운다.
void	TScoreFile::initialize()
{
	/*
	 * 	predefined top 10 players
	 */
	theScoreVector.clear();

	push_back( "Wizard",	 	500000 );
	push_back( "Torus Player",		400000 );
	push_back( "Swift Finger",		300000 );
	push_back( "Stable Move",		240000 );
	push_back( "Keen Eye",			160000 );

	push_back( "Steady move",		80000 );
	push_back( "Playable?",			40000 );
	push_back( "Intermediate2",		20000 );
	push_back( "Intermediate1",	 	10000 );
	push_back( "Beginner",	 		5000 );
}




void TScoreFile::push_back( const char *pName, int nScore )
{
	
	theScoreVector.push_back( ScoreData( pName, nScore )  );

	//	최소값을 삭제하기 위해
	//	erase 함수와 더불어 사용하면 편함
	sort( theScoreVector.begin(), theScoreVector.end(), MaxScore() );
	m_bDirty = true;
}


int TScoreFile::getScore( int Number )
{
	return theScoreVector[ Number ].getScore();
}

void TScoreFile::getPlayer( int aNumber, char *aPlayerPtr )
{
	strcpy( aPlayerPtr, theScoreVector[ aNumber ].getName() );
}

void TScoreFile::write()
{
	wxFile f;

	if( f.Open(TORUS_HIGHSCORE, wxFile::write) == true )
	{
		int j = 0; 

		for( int i = 0; i < TORUS_MAX_TOP_PLAYERS; i++ )
		{
			f.Write( ( void *) &(theScoreVector[i]), sizeof( ScoreData ) );
			j++;
		}	

		f.Close();

		theScoreVector.clear();
	}
}

void TScoreFile::read()
{
	wxFile f;

	if( f.Open(TORUS_HIGHSCORE, wxFile::read) == true )
	{
		ScoreData sd;

		while( f.Eof() != true )
		{		
			f.Read( (void *) &sd, sizeof( ScoreData ) );

			push_back( sd.getName(), sd.getScore() );
		}

		int bb = theScoreVector.size() ;

		f.Close(); 
	}

	/*
	FILE *fp = fopen( TORUS_HIGHSCORE, "rb" );

	if( fp != NULL )
	{
		ScoreData sd;

		while( !feof(fp) )
		{		
			//fread( (void *) &sd, sizeof( ScoreData ), 1, fp );
			fread( (void *) &sd, 1, sizeof( ScoreData ), fp );

			push_back( sd.getName(), sd.getScore() );
		}

		int bb = theScoreVector.size() ;

		fclose( fp );
	}
	else
	{
		;	//	file is not opened.
	}
	*/
}

int TScoreFile::getMinScore()
{	
	ScoreVector::iterator	iter = min_element( theScoreVector.begin(), 
												theScoreVector.end(), 
												//not2(MinScore<struct ScoreData>()) );
												MinScore() );
	return (*iter).getScore();
}
